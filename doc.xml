<?xml version="1.0" encoding="utf-8"?>
<!-- last id = L005 -->
<spec id="L001" title="Объект CNS">   
  <spec id="L002" title="Общий алгоритм">
	  <spec id="L003" title="Общий алгоритм">	
        1) ЦНС не выставляет эффекторов до тех пор, пока все предикаторы не начнут давать правильный прогноз
			  2) ЦНС выполняет Алгоритм этапа обучения L004
        3) ЦНС выполняет Алгоритм этапа реакция L005
		  <spec id="L004" title="Алгоритм этапа обучения">
			  Сначала ЦНС не выставляет эффекторы.
			  Ждёт пока предикторы не начнут стабильно прогнозировать спокойное состояние. (ждёт до какого-то момента)
			  Затем берет случайный эффектор и изменяет его, например, на 10%.
			  Вообще он запоминает какие эффекторы он на сколько выставлял, чтобы перебрать их полностью с каким-то шагом.
			  После того как изменил эффектор на 10%, ЦНС смотрит - какие сенсоры изменились,
			  и соединяет эффектор и сенсор связью. Теперь предиктор при прогнозе учитывает эту связь.
        Теперь ждем пока прогнозы опять отработают и изменяем эффекторы дальше.
		  </spec>
		  <spec id="L005" title="Алгоритм этапа реакция">
			  Как только ЦНС сможет достаточно хорошо строить прогноз (или раньше)
			  он, теперь уже зная, как эффеторы влияют на целевой сенсор (в данном случае сенсор голода)
			  начинает строить деревья действий, отметая заведомо ошибочные.
			  Строит, прогоняя эти ветви по "виртуальному конвейеру прогнозирования",
			  строи прогноз в глубину на столько шагов, сколько предусмотрено планом действий.

			  Затем он начинает реально выпольнять ветви, которые приводят к положительному влиянию на целевой сенсор,
			  корректируя план по необходимости.
		  </spec>
	  </spec>	  
  </spec>
  <spec id="L006" title="BUG/ENVIRONMENT">
    Состояние крича
    /// Каждый крич последовательно меняет состояния при определенном воздействии на него среды
    /// Договор такой:
    ///  Сначала крич обладает состоянием JUST_ADDED_OR_MOVED
    /// В этом состоянии среда может узнать значения эффекторов, выставленных у крича,
    ///  и согласно им изменить некоторые его сенсоры (по законам пары крич/среда)
    ///  После этого среда должна вызвать метода EnvironmentAffected(), который переведет крич в состояние ENVIRONMENT_AFFECTED
    /// ENVIRONMENT_AFFECTED
    ///  Как только крича уведомили, что EnvironmentAffected, он должен в свою очередь уведомить об этом ЦНС
    ///  который после этого совершит операции с памятью, проверит предикторы, выставит эффекторы и сделает прогноз.
    /// Крич выставляет состояние CREATURE_REACTED
    /// Теперь среда вызывает метод крича - Advantage()
    ///  Он по состояниям эффекторов, выставленных ЦНС - крич выставляет свои сенсоры и устанавливает состояние JUST_ADDED_OR_MOVED
    ///  Теперь среда вносит свои коррективы в сенсоры крича и вызывает EnvironmentAffected()
    ///  и так по кругу
    
    
    Создается крич
    Среда вносит корректировки
    ЦНС прогнозирует
        
     
    Крич выставляет сенсоры  (Advantage)
    Среда вносит корректировки
    ЦНС проверяет предикторы 
    ЦНС выставляет эффекторы
    ЦНС делает прогноз
    
  </spec>
</spec>